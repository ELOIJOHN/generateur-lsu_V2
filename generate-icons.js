const sharp = require('sharp');
const fs = require('fs');
const path = require('path');

// Tailles d'ic√¥nes requises
const ICON_SIZES = [72, 96, 128, 144, 152, 192, 384, 512];

// Cr√©er le dossier assets/icons s'il n'existe pas
const iconsDir = path.join(__dirname, 'assets', 'icons');
if (!fs.existsSync(iconsDir)) {
    fs.mkdirSync(iconsDir, { recursive: true });
}

// Fonction pour g√©n√©rer les ic√¥nes
async function generateIcons() {
    try {
        // V√©rifier si l'ic√¥ne source existe
        const sourceIcon = path.join(__dirname, 'assets', 'icon-source.png');
        if (!fs.existsSync(sourceIcon)) {
            console.error('‚ùå Ic√¥ne source non trouv√©e. Veuillez placer une image icon-source.png dans le dossier assets/');
            return;
        }

        console.log('üé® G√©n√©ration des ic√¥nes PWA...');

        // G√©n√©rer chaque taille d'ic√¥ne
        for (const size of ICON_SIZES) {
            const outputPath = path.join(iconsDir, `icon-${size}x${size}.png`);
            
            await sharp(sourceIcon)
                .resize(size, size)
                .toFile(outputPath);
            
            console.log(`‚úÖ Ic√¥ne ${size}x${size} g√©n√©r√©e`);
        }

        // G√©n√©rer l'ic√¥ne pour Apple Touch
        await sharp(sourceIcon)
            .resize(192, 192)
            .toFile(path.join(iconsDir, 'apple-touch-icon.png'));

        console.log('‚úÖ Ic√¥ne Apple Touch g√©n√©r√©e');

        // G√©n√©rer l'ic√¥ne de badge
        await sharp(sourceIcon)
            .resize(72, 72)
            .toFile(path.join(iconsDir, 'badge-72x72.png'));

        console.log('‚úÖ Badge g√©n√©r√©');

        console.log('‚ú® G√©n√©ration des ic√¥nes termin√©e !');
    } catch (error) {
        console.error('‚ùå Erreur lors de la g√©n√©ration des ic√¥nes:', error);
    }
}

// Ex√©cuter la g√©n√©ration
generateIcons(); 